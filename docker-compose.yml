version: "3.7"

services:
  router-default:
    restart: always
    build: ./server/router-default
    container_name: router-default
    environment: 
      - PORT=${PORT_ROUTER_DEFAULT_INTERNAL}
      - HOST=${HOST_GENERAL}
    ports:
      - ${PORT_ROUTER_DEFAULT_EXTERNAL}:${PORT_ROUTER_DEFAULT_INTERNAL}
    depends_on:
      - api-auth 
      - api-content
      - api-users
      - api-extra 
      - api-stuff
      - web-public
      - web-processes
      - web-admin
    links:
      - api-auth 
      - api-content
      - api-users
      - api-extra 
      - api-stuff
      - web-public
      - web-processes
      - web-admin
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000"]
      interval: 30s
      timeout: 10s
      retries: 5
    networks:
      - network

  api-auth:
    build: ./server/api-auth/
    container_name: api-auth
    environment: 
      - PORT=${PORT_API_AUTH_INTERNAL}
      - HOST=${HOST_GENERAL}
      - SECRET=${SECRET_AUTH_KEY}
    volumes:
      - ./server/api-auth/src:/home/src:rw
    ports:
      - ${PORT_API_AUTH_EXTERNAL}:${PORT_API_AUTH_INTERNAL}
    networks:
      - network

  api-content:
    build: ./server/api-content/
    container_name: api-content
    environment: 
      - PORT=${PORT_API_CONTENT_INTERNAL}
      - HOST=${HOST_GENERAL}
    volumes:
      - ./server/api-content/src:/home/src:rw
    ports:
      - ${PORT_API_CONTENT_EXTERNAL}:${PORT_API_CONTENT_INTERNAL}
    networks:
      - network

  api-users:
    build: ./server/api-users/
    container_name: api-users
    environment: 
      - PORT=${PORT_API_USERS_INTERNAL}
      - HOST=${HOST_GENERAL}
    volumes:
      - ./server/api-users/src:/home/src:rw
    ports:
      - ${PORT_API_USERS_EXTERNAL}:${PORT_API_USERS_INTERNAL}
    networks:
      - network

  api-extra:
    build: ./server/api-extra/
    container_name: api-extra
    environment: 
      - PORT=${PORT_API_EXTRA_INTERNAL}
      - HOST=${HOST_GENERAL}
    volumes:
      - ./server/api-extra/src:/home/src:rw
    ports:
      - ${PORT_API_EXTRA_EXTERNAL}:${PORT_API_EXTRA_INTERNAL}
    networks:
      - network

  api-stuff:
    build: ./server/api-stuff/
    container_name: api-stuff
    environment: 
      - PORT=${PORT_API_STUFF_INTERNAL}
      - HOST=${HOST_GENERAL}
    volumes:
      - ./server/api-stuff/src:/home/src:rw
    ports:
      - ${PORT_API_STUFF_EXTERNAL}:${PORT_API_STUFF_INTERNAL}
    networks:
      - network

  web-public:
    build: ./client/web-public/
    container_name: web-public
    environment: 
      - PORT=${PORT_FRONT_PUBLIC_INTERNAL}
      - HOST=${HOST_GENERAL}
    #volumes:
    #  - ./client/web-public:/home/src/:rw
    ports:
      - ${PORT_FRONT_PUBLIC_EXTERNAL}:${PORT_FRONT_PUBLIC_INTERNAL}
    networks:
      - network

  web-processes:
    build: ./client/web-processes/
    container_name: web-processes
    environment: 
      - PORT=${PORT_FRONT_PROCESSES_INTERNAL}
      - HOST=${HOST_GENERAL}
    volumes:
      - ./client/web-processes/src:/home/src:rw
    ports:
      - ${PORT_FRONT_PROCESSES_EXTERNAL}:${PORT_FRONT_PROCESSES_INTERNAL}
    networks:
      - network

  web-admin:
    build: ./client/web-admin/
    container_name: web-admin
    environment: 
      - PORT=${PORT_FRONT_ADMIN_INTERNAL}
      - HOST=${HOST_GENERAL}
    volumes:
      - ./client/web-admin/src:/home/src:rw
    ports:
      - ${PORT_FRONT_ADMIN_EXTERNAL}:${PORT_FRONT_ADMIN_INTERNAL}
    networks:
      - network

  ftp-default:
    build: ./data/ftp-default
    restart: always
    container_name: ftp-default
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
      - PORT=${PORT_FTP_INTERNAL}
    volumes:
      - ./data/ftp-default/storage:/data/db
    ports: 
      - ${PORT_FTP_EXTERNAL}:${PORT_FTP_INTERNAL}

  mongo-auth:
    build: ./data/mongo-auth
    restart: always
    container_name: mongo-auth
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
      - PORT=${PORT_MONGO_AUTH_INTERNAL}
    volumes:
      - ./data/mongo-auth/storage:/data/db
    ports: 
      - ${PORT_MONGO_AUTH_EXTERNAL}:${PORT_MONGO_AUTH_INTERNAL}

  mongo-content:
    build: ./data/mongo-content
    restart: always
    container_name: mongo-content
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
      - PORT=${PORT_MONGO_CONTENT_INTERNAL}
    volumes:
      - ./data/mongo-content/storage:/data/db
    ports: 
      - ${PORT_MONGO_CONTENT_EXTERNAL}:${PORT_MONGO_CONTENT_INTERNAL}

  mongo-users:
    build: ./data/mongo-users
    restart: always
    container_name: mongo-users
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
      - PORT=${PORT_MONGO_USERS_INTERNAL}
    volumes:
      - ./data/mongo-users/storage:/data/db
    ports: 
      - ${PORT_MONGO_USERS_EXTERNAL}:${PORT_MONGO_USERS_INTERNAL}

  mongo-extra:
    build: ./data/mongo-extra
    restart: always
    container_name: mongo-extra
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
      - PORT=${PORT_MONGO_EXTRA_INTERNAL}
    volumes:
      - ./data/mongo-extra/storage:/data/db
    ports: 
      - ${PORT_MONGO_EXTRA_EXTERNAL}:${PORT_MONGO_EXTRA_INTERNAL}

  mongo-stuff:
    build: ./data/mongo-stuff
    restart: always
    container_name: mongo-stuff
    environment:
      - MONGO_INITDB_ROOT_USERNAME=root
      - MONGO_INITDB_ROOT_PASSWORD=example
      - PORT=${PORT_MONGO_STUFF_INTERNAL}
    
    volumes:
      - ./data/mongo-stuff/storage:/data/db
    ports: 
      - ${PORT_MONGO_STUFF_EXTERNAL}:${PORT_MONGO_STUFF_INTERNAL}


networks:
  network:
    driver: bridge
