version: "3.7"

services:
  router:
    restart: always
    build: ./apps/server/router
    container_name: router
    environment: 
      - PORT=${PORT_ROUTER_INTERNAL}
      - HOST=${HOST_GENERAL}
    ports:
      - ${PORT_ROUTER_EXTERNAL}:${PORT_ROUTER_INTERNAL}
    depends_on:
      - api-auth 
      - api-content
      - api-users
      - api-extra 
      - api-stuff
      - front-public
      - front-processes
      - front-admin
    links:
      - api-auth 
      - api-content
      - api-users
      - api-extra 
      - api-stuff
      - front-public
      - front-processes
      - front-admin
    networks:
      - network

  api-auth:
    build: ./apps/server/api-auth/
    container_name: api-auth
    environment: 
      - PORT=${PORT_API_AUTH_INTERNAL}
      - HOST=${HOST_GENERAL}
    volumes:
      - ./apps/server/api-auth/src:/home/src:rw
    ports:
      - ${PORT_API_AUTH_EXTERNAL}:${PORT_API_AUTH_INTERNAL}
    networks:
      - network

  api-content:
    build: ./apps/server/api-content/
    container_name: api-content
    environment: 
      - PORT=${PORT_API_CONTENT_INTERNAL}
      - HOST=${HOST_GENERAL}
    volumes:
      - ./apps/server/api-content/src:/home/src:rw
    ports:
      - ${PORT_API_CONTENT_EXTERNAL}:${PORT_API_CONTENT_INTERNAL}
    networks:
      - network

  api-users:
    build: ./apps/server/api-users/
    container_name: api-users
    environment: 
      - PORT=${PORT_API_USERS_INTERNAL}
      - HOST=${HOST_GENERAL}
    volumes:
      - ./apps/server/api-users/src:/home/src:rw
    ports:
      - ${PORT_API_USERS_EXTERNAL}:${PORT_API_USERS_INTERNAL}
    networks:
      - network

  api-extra:
    build: ./apps/server/api-extra/
    container_name: api-extra
    environment: 
      - PORT=${PORT_API_EXTRA_INTERNAL}
      - HOST=${HOST_GENERAL}
    volumes:
      - ./apps/server/api-extra/src:/home/src:rw
    ports:
      - ${PORT_API_EXTRA_EXTERNAL}:${PORT_API_EXTRA_INTERNAL}
    networks:
      - network

  api-stuff:
    build: ./apps/server/api-stuff/
    container_name: api-stuff
    environment: 
      - PORT=${PORT_API_STUFF_INTERNAL}
      - HOST=${HOST_GENERAL}
    volumes:
      - ./apps/server/api-stuff/src:/home/src:rw
    ports:
      - ${PORT_API_STUFF_EXTERNAL}:${PORT_API_STUFF_INTERNAL}
    networks:
      - network

  front-public:
    build: ./apps/web/front-public/
    container_name: front-public
    environment: 
      - PORT=${PORT_FRONT_PUBLIC_INTERNAL}
      - HOST=${HOST_GENERAL}
    volumes:
      - ./apps/web/front-public/src:/home/src:rw
    ports:
      - ${PORT_FRONT_PUBLIC_EXTERNAL}:${PORT_FRONT_PUBLIC_INTERNAL}
    networks:
      - network

  front-processes:
    build: ./apps/web/front-processes/
    container_name: front-processes
    environment: 
      - PORT=${PORT_FRONT_PROCESSES_INTERNAL}
      - HOST=${HOST_GENERAL}
    volumes:
      - ./apps/web/front-processes/src:/home/src:rw
    ports:
      - ${PORT_FRONT_PROCESSES_EXTERNAL}:${PORT_FRONT_PROCESSES_INTERNAL}
    networks:
      - network

  front-admin:
    build: ./apps/web/front-admin/
    container_name: front-admin
    environment: 
      - PORT=${PORT_FRONT_ADMIN_INTERNAL}
      - HOST=${HOST_GENERAL}
    volumes:
      - ./apps/web/front-admin/src:/home/src:rw
    ports:
      - ${PORT_FRONT_ADMIN_EXTERNAL}:${PORT_FRONT_ADMIN_INTERNAL}
    networks:
      - network

  storage:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    command: mongod --port ${PORT_STORAGE_EXTERNAL}
    volumes:
      - type: bind
        source: ./data/storage
        target: /data/db
    ports: 
      - ${PORT_STORAGE_EXTERNAL}:${PORT_STORAGE_INTERNAL}

  db-auth:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    command: mongod --port ${PORT_DB_AUTH_EXTERNAL}
    volumes:
      - type: bind
        source: ./data/db-auth
        target: /data/db
    ports: 
      - ${PORT_DB_AUTH_EXTERNAL}:${PORT_DB_AUTH_INTERNAL}

  db-content:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    command: mongod --port ${PORT_DB_CONTENT_EXTERNAL}
    volumes:
      - type: bind
        source: ./data/db-content
        target: /data/db
    ports: 
      - ${PORT_DB_CONTENT_EXTERNAL}:${PORT_DB_CONTENT_INTERNAL}

  db-users:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    command: mongod --port ${PORT_DB_USERS_EXTERNAL}
    volumes:
      - type: bind
        source: ./data/db-users
        target: /data/db
    ports: 
      - ${PORT_DB_USERS_EXTERNAL}:${PORT_DB_USERS_INTERNAL}

  db-extra:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    command: mongod --port ${PORT_DB_EXTRA_EXTERNAL}
    volumes:
      - type: bind
        source: ./data/db-extra
        target: /data/db
    ports: 
      - ${PORT_DB_EXTRA_EXTERNAL}:${PORT_DB_EXTRA_INTERNAL}

  db-stuff:
    image: mongo
    restart: always
    environment:
      MONGO_INITDB_ROOT_USERNAME: root
      MONGO_INITDB_ROOT_PASSWORD: example
    command: mongod --port ${PORT_DB_STUFF_EXTERNAL}
    
    volumes:
      - type: bind
        source: ./data/db-stuff
        target: /data/db
    ports: 
      - ${PORT_DB_STUFF_EXTERNAL}:${PORT_DB_STUFF_INTERNAL}


networks:
  network:
    driver: bridge
